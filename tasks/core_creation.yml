---
# Version: 1.3.0
# Description: Solr core creation with robust checks for registered core vs. instance dir

- name: install-solr - Check core registration via API
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=STATUS&core={{ solr_core_name }}"
    method: GET
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    return_content: yes
  register: core_status
  changed_when: false
  failed_when: false

- name: install-solr - Parse core status JSON
  set_fact:
    core_status_json: "{{ core_status.content | default('{}') | from_json }}"
  when: core_status.content is defined
  changed_when: false

- name: install-solr - Determine if core is registered (API)
  set_fact:
    core_registered: "{{ (core_status_json.status is defined) and (core_status_json.status[solr_core_name] is defined) }}"
  changed_when: false

- name: install-solr - Check if core instance directory exists inside container
  command: >
    docker exec {{ solr_container_name }} test -f /var/solr/data/{{ solr_core_name }}/core.properties
  register: core_dir_check
  failed_when: false
  changed_when: false

- name: install-solr - Set fact if instance directory present
  set_fact:
    core_instance_present: "{{ core_dir_check.rc == 0 }}"
  changed_when: false

- name: install-solr - Debug core state
  debug:
    msg:
      - "core_registered: {{ core_registered | default(false) }}"
      - "core_instance_present: {{ core_instance_present | default(false) }}"

# If core is registered but instance missing -> UNLOAD to remove registration so we can CREATE
- name: install-solr - UNLOAD registered core with missing instance
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=UNLOAD&core={{ solr_core_name }}&deleteIndex=false&deleteInstanceDir=false"
    method: GET
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    status_code: 200
  register: core_unload
  failed_when: false
  when: core_registered and not core_instance_present

- name: install-solr - Refresh registration fact after UNLOAD
  set_fact:
    core_registered: false
  when: core_registered and not core_instance_present and (core_unload is defined)

# Try create via API if instance missing
- name: install-solr - Create Solr core via API when instance absent
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=CREATE&name={{ solr_core_name }}&configSet={{ solr_core_config }}"
    method: GET
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    status_code: 200
  register: core_creation
  failed_when: false
  when: not core_instance_present

- name: install-solr - If API CREATE succeeded, wait for ping
  uri:
    url: "http://localhost:{{ solr_port }}/solr/{{ solr_core_name }}/admin/ping"
    method: GET
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    status_code: 200
  register: core_ping
  retries: 10
  delay: 3
  until: core_ping.status == 200
  when: core_creation is defined and core_creation.status == 200

# Fallback: if API CREATE did not produce an instance, copy bundled conf into the volume and restart container
- name: install-solr - copy bundled conf into volume if instance still missing
  shell: |
      docker run --rm \
        -v {{ solr_volume | default('solr_data_bschrei') }}:/data \
        -v {{ role_path }}/files/conf:/tmp/conf \
        busybox sh -c "mkdir -p /data/{{ solr_core_name }} && cp -r /tmp/conf /data/{{ solr_core_name }}/conf && printf 'name={{ solr_core_name }}\nconfigSet={{ solr_core_config }}\n' > /data/{{ solr_core_name }}/core.properties"
  register: copy_conf
  failed_when: copy_conf.rc != 0
  when:
    - not core_instance_present
    - not (core_creation is defined and core_creation.status == 200)

- name: install-solr - Restart Solr container to pick up new core instance (fallback)
  command: docker compose -f {{ docker_compose_file | default('/opt/solr/docker-compose.yml') }} restart {{ solr_container_name }}
  when: copy_conf is defined and copy_conf.rc == 0

# After actions, re-check instance dir
- name: install-solr - Re-check instance directory after create/copy
  command: >
    docker exec {{ solr_container_name }} test -f /var/solr/data/{{ solr_core_name }}/core.properties
  register: core_dir_check_after
  failed_when: false
  changed_when: false

- name: install-solr - Set final instance present fact
  set_fact:
    core_instance_present: "{{ core_dir_check_after.rc == 0 }}"
  changed_when: false

# If core exists or now present, deploy moodle schema and config changes as before
- name: install-solr - Display core already exists
  debug:
    msg:
      - "Core {{ solr_core_name }} already exists"
      - "Skipping core creation"
  when: core_instance_present

- name: install-solr - Copy Moodle schema to local config directory
  copy:
    src: moodle_schema.xml
    dest: "{{ solr_config_dir }}/moodle_schema.xml"
    owner: root
    group: root
    mode: '0644'
  when:
    - solr_use_moodle_schema | default(true)
    - core_instance_present

- name: install-solr - Copy Moodle schema to container
  command: >
    docker cp {{ solr_config_dir }}/moodle_schema.xml
    {{ solr_container_name }}:/var/solr/data/{{ solr_core_name }}/conf/managed-schema
  when:
    - solr_use_moodle_schema | default(true)
    - core_instance_present
  register: schema_copy

- name: install-solr - Set schema file permissions in container
  command: >
    docker exec {{ solr_container_name }}
    chown solr:solr /var/solr/data/{{ solr_core_name }}/conf/managed-schema
  when:
    - solr_use_moodle_schema | default(true)
    - core_instance_present
    - schema_copy is succeeded

- name: install-solr - Reload core to apply new schema
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=RELOAD&core={{ solr_core_name }}"
    method: GET
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    status_code: 200
  when:
    - solr_use_moodle_schema | default(true)
    - core_instance_present
    - schema_copy is succeeded

- name: install-solr - Get core status details
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=STATUS&core={{ solr_core_name }}"
    method: GET
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    return_content: yes
  register: core_details
  changed_when: false

- name: install-solr - Configure core properties (maxBooleanClauses)
  uri:
    url: "http://localhost:{{ solr_port }}/solr/{{ solr_core_name }}/config"
    method: POST
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      set-property:
        query.maxBooleanClauses: "{{ solr_max_boolean_clauses }}"
    status_code: 200
  register: core_config
  when: not core_exists

- name: install-solr - Configure autoCommit settings
  uri:
    url: "http://localhost:{{ solr_port }}/solr/{{ solr_core_name }}/config"
    method: POST
    user: "{{ solr_admin_user }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      set-property:
        updateHandler.autoCommit.maxTime: "{{ solr_auto_commit_time }}"
        updateHandler.autoSoftCommit.maxTime: "{{ solr_auto_soft_commit_time }}"
    status_code: 200
  register: core_commit_config
  when: not core_exists

- name: install-solr - Test core with simple query by Customer User
  uri:
    url: "http://localhost:{{ solr_port }}/solr/{{ solr_core_name }}/select?q=*:*"
    method: GET
    user: "{{ solr_customer_user }}"
    password: "{{ customer_password }}"
    force_basic_auth: yes
    status_code: 200
  register: core_query_test
  changed_when: false

- name: install-solr - Create Rundeck output
  set_fact:
    core_creation_result:
      status: "success"
      timestamp: "{{ ansible_date_time.iso8601 }}"
      message: "Solr core creation completed"
      details:
        core_name: "{{ solr_core_name }}"
        core_config: "{{ solr_core_config }}"
        core_existed: "{{ core_exists }}"
        core_created: "{{ not core_exists }}"
        max_boolean_clauses: "{{ solr_max_boolean_clauses }}"
        auto_commit_time: "{{ solr_auto_commit_time }}"
        auto_soft_commit_time: "{{ solr_auto_soft_commit_time }}"
        core_url: "http://localhost:{{ solr_port }}/solr/{{ solr_core_name }}"
        query_test: "{{ 'PASSED' if core_query_test.status == 200 else 'FAILED' }}"
        moodle_schema: "{{ 'DEPLOYED' if schema_copy is succeeded else 'SKIPPED' }}"

- name: install-solr - Display Rundeck output
  debug:
    msg: "{{ core_creation_result | to_nice_json }}"
  when: rundeck_integration_enabled | default(false)

- name: install-solr - Display standard summary
  debug:
    msg:
      - "SOLR CORE CREATION COMPLETED"
      - "Core name: {{ solr_core_name }}"
      - "Core config: {{ solr_core_config }}"
      - "Core status: {{ 'ALREADY EXISTED' if core_exists else 'NEWLY CREATED' }}"
      - "Core URL: http://localhost:{{ solr_port }}/solr/{{ solr_core_name }}"
      - "Max boolean clauses: {{ solr_max_boolean_clauses }}"
      - "Auto-commit time: {{ solr_auto_commit_time }}ms"
      - "Auto soft-commit time: {{ solr_auto_soft_commit_time }}ms"
      - "Query test: {{ 'PASSED' if core_query_test.status == 200 else 'FAILED' }}"
      - "Moodle schema: {{ 'DEPLOYED' if schema_copy is succeeded else 'SKIPPED' }}"
  when: not rundeck_integration_enabled | default(false)
---
# Version: 2.0.0
# Description: Flexible Solr core creation with main_core and Moodle version-specific cores
# Changelog v2.0.0:
#   - Creates main_core with _default config
#   - Creates Moodle version-specific cores (4.1, 4.2, 4.3, 4.4, 5.0.x)
#   - Automatic configset preparation for each version

- name: core-creation - Define core configurations
  set_fact:
    solr_cores:
      - name: "main_core"
        config: "_default"
        description: "Main Solr core with default configuration"
      - name: "moodle_41"
        config: "moodle_41_config"
        description: "Moodle 4.1 specific core"
        moodle_version: "4.1"
      - name: "moodle_42"
        config: "moodle_42_config"
        description: "Moodle 4.2 specific core"
        moodle_version: "4.2"
      - name: "moodle_43"
        config: "moodle_43_config"
        description: "Moodle 4.3 specific core"
        moodle_version: "4.3"
      - name: "moodle_44"
        config: "moodle_44_config"
        description: "Moodle 4.4 specific core"
        moodle_version: "4.4"
      - name: "moodle_50"
        config: "moodle_50_config"
        description: "Moodle 5.0.x specific core"
        moodle_version: "5.0"
  when: solr_multi_version_cores | default(false)

- name: core-creation - Use single core configuration
  set_fact:
    solr_cores:
      - name: "{{ solr_core_name }}"
        config: "_default"
        description: "Single Solr core for {{ customer_name }}"
  when: not solr_multi_version_cores | default(false)

# ============================================
# PREPARE MOODLE CONFIGSETS
# ============================================

- name: core-creation - Create Moodle configsets directory structure
  command: >
    docker exec {{ solr_container_name }} bash -c "
      mkdir -p /var/solr/data/configsets/{{ item.config }}
    "
  loop: "{{ solr_cores }}"
  when: item.config != "_default"
  failed_when: false
  changed_when: false

- name: core-creation - Copy base config to Moodle configsets
  command: >
    docker exec {{ solr_container_name }} bash -c "
      if [ ! -f /var/solr/data/configsets/{{ item.config }}/conf/solrconfig.xml ]; then
        cp -r /opt/solr/server/solr/configsets/_default/* /var/solr/data/configsets/{{ item.config }}/
        echo 'ConfigSet {{ item.config }} created from _default'
      else
        echo 'ConfigSet {{ item.config }} already exists'
      fi
    "
  loop: "{{ solr_cores }}"
  when: item.config != "_default"
  register: configset_creation

- name: core-creation - Deploy Moodle schema to configsets
  when: 
    - item.config != "_default"
    - solr_use_moodle_schema | default(true)
  block:
    - name: Copy Moodle schema to container temp
      command: >
        docker cp {{ solr_config_dir }}/moodle_schema.xml 
        {{ solr_container_name }}:/tmp/moodle_schema_{{ item.moodle_version | default('default') }}.xml
      failed_when: false
    
    - name: Deploy schema to specific configset
      command: >
        docker exec {{ solr_container_name }} bash -c "
          if [ -f /tmp/moodle_schema_{{ item.moodle_version | default('default') }}.xml ]; then
            cp /tmp/moodle_schema_{{ item.moodle_version | default('default') }}.xml \
               /var/solr/data/configsets/{{ item.config }}/conf/managed-schema
            chown -R solr:solr /var/solr/data/configsets/{{ item.config }}/
            echo 'Moodle schema deployed to {{ item.config }}'
          fi
        "
  loop: "{{ solr_cores }}"

# ============================================
# CREATE CORES
# ============================================

- name: core-creation - Check if cores already exist
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=STATUS&core={{ item.name }}"
    method: GET
    user: "{{ admin_user | default('admin') }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    return_content: yes
  loop: "{{ solr_cores }}"
  register: cores_status
  changed_when: false
  failed_when: false

- name: core-creation - Parse core existence
  set_fact:
    existing_cores: "{{ existing_cores | default([]) + [item.item.name] }}"
  loop: "{{ cores_status.results }}"
  when: 
    - item.content is defined
    - "'instanceDir' in item.content"
  no_log: true

- name: core-creation - Create missing cores
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=CREATE&name={{ item.name }}&configSet={{ item.config }}"
    method: GET
    user: "{{ admin_user | default('admin') }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    status_code: 200
  loop: "{{ solr_cores }}"
  when: item.name not in (existing_cores | default([]))
  register: core_creation_results
  failed_when: false

- name: core-creation - Handle failed core creations with fallback
  when: 
    - item.failed | default(false) or item.status | default(200) != 200
    - item.item.name not in (existing_cores | default([]))
  shell: |
    docker run --rm \
      -v {{ solr_volume_name }}:/data \
      -v {{ role_path }}/files/conf:/tmp/conf \
      alpine sh -c "
        mkdir -p /data/{{ item.item.name }}/conf
        if [ -d /tmp/conf ]; then
          cp -r /tmp/conf/* /data/{{ item.item.name }}/conf/
        fi
        printf 'name={{ item.item.name }}\nconfigSet={{ item.item.config }}\n' > /data/{{ item.item.name }}/core.properties
        chown -R 8983:8983 /data/{{ item.item.name }}
      "
  loop: "{{ core_creation_results.results }}"
  failed_when: false

# ============================================
# CONFIGURE CORES
# ============================================

- name: core-creation - Configure core properties
  uri:
    url: "http://localhost:{{ solr_port }}/solr/{{ item.name }}/config"
    method: POST
    user: "{{ admin_user | default('admin') }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      set-property:
        query.maxBooleanClauses: "{{ solr_max_boolean_clauses }}"
        updateHandler.autoCommit.maxTime: "{{ solr_auto_commit_time }}"
        updateHandler.autoSoftCommit.maxTime: "{{ solr_auto_soft_commit_time }}"
    status_code: 200
  loop: "{{ solr_cores }}"
  when: item.name not in (existing_cores | default([]))
  failed_when: false

# ============================================
# VERIFY CORES
# ============================================

- name: core-creation - Test all cores with ping
  uri:
    url: "http://localhost:{{ solr_port }}/solr/{{ item.name }}/admin/ping"
    method: GET
    user: "{{ admin_user | default('admin') }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    status_code: 200
  loop: "{{ solr_cores }}"
  register: cores_ping
  failed_when: false

- name: core-creation - Get final core status
  uri:
    url: "http://localhost:{{ solr_port }}/solr/admin/cores?action=STATUS"
    method: GET
    user: "{{ admin_user | default('admin') }}"
    password: "{{ admin_password }}"
    force_basic_auth: yes
    return_content: yes
  register: all_cores_status

- name: core-creation - Parse all cores
  set_fact:
    active_cores: "{{ (all_cores_status.json.status | dict2items | map(attribute='key') | list) }}"
  when: all_cores_status.json is defined

# ============================================
# SUMMARY
# ============================================

- name: core-creation - Create summary
  set_fact:
    core_creation_summary:
      requested_cores: "{{ solr_cores | map(attribute='name') | list }}"
      created_cores: "{{ active_cores | default([]) }}"
      main_core_status: "{{ 'ACTIVE' if 'main_core' in active_cores else 'NOT FOUND' }}"
      moodle_cores: "{{ active_cores | select('match', 'moodle_.*') | list }}"
      multi_version_mode: "{{ solr_multi_version_cores | default(false) }}"

- name: core-creation - Display summary
  debug:
    msg:
      - "=========================================="
      - "SOLR CORE CREATION COMPLETED"
      - "=========================================="
      - "Mode: {{ 'Multi-Version' if solr_multi_version_cores | default(false) else 'Single Core' }}"
      - ""
      - "CORES CREATED:"
      - "{{ core_creation_summary.created_cores | to_nice_yaml }}"
      - ""
      - "Main Core: {{ core_creation_summary.main_core_status }}"
      - "Moodle Cores: {{ core_creation_summary.moodle_cores | length }} cores"
      - ""
      - "ACCESS URLs:"
      - "Main: http://localhost:{{ solr_port }}/solr/main_core"
      {% for core in solr_cores %}
      - "{{ core.description }}: http://localhost:{{ solr_port }}/solr/{{ core.name }}"
      {% endfor %}
      - "=========================================="

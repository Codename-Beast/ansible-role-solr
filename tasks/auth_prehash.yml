---
# Version: 1.2.1 - HOTFIX
# Description: Pre-hash passwords for Solr authentication (SOLR-COMPATIBLE SHA256)
# Changelog v1.2.1:
#   - FIXED: Changed from Bcrypt to SHA256 double-hash (Solr-compatible)
#   - FIXED: Removed htpasswd dependency (now using openssl(Not yet))
#   - Format: base64(sha256(sha256(salt+password))) base64(salt)
#   - Reference: https://solr.apache.org/guide/solr/latest/deployment-guide/basic-authentication-plugin.html

- name: install-solr - Check for existing security.json
  stat:
    path: "{{ solr_config_dir }}/security.json"
  register: existing_security_json

- name: install-solr - Skip if auth already configured
  block:
    - name: install-solr - Display skip message
      debug:
        msg:
          - "AUTH ALREADY CONFIGURED"
          - "File: {{ solr_config_dir }}/security.json exists"
          - "To reconfigure: set solr_force_reconfigure_auth: true"
    
    - name: install-solr - End play for this host
      meta: end_host
  when:
    - existing_security_json.stat.exists
    - not solr_force_reconfigure_auth | default(false)

- name: install-solr - Resolve or generate admin password
  set_fact:
    admin_password: "{{ solr_admin_password | default(lookup('password', '/dev/null chars=ascii_letters,digits length=20')) }}"
  no_log: true

- name: install-solr - Resolve or generate support password
  set_fact:
    support_password: "{{ solr_support_password | default(lookup('password', '/dev/null chars=ascii_letters,digits length=16')) }}"
  no_log: true

- name: install-solr - Resolve or generate customer password
  set_fact:
    customer_password: "{{ solr_customer_password | default(lookup('password', '/dev/null chars=ascii_letters,digits length=16')) }}"
  no_log: true

- name: install-solr - Generate random salt for admin (32 bytes)
  shell: openssl rand -base64 32
  register: admin_salt
  changed_when: false
  no_log: true

- name: install-solr - Generate random salt for support (32 bytes)
  shell: openssl rand -base64 32
  register: support_salt
  changed_when: false
  no_log: true

- name: install-solr - Generate random salt for customer (32 bytes)
  shell: openssl rand -base64 32
  register: customer_salt
  changed_when: false
  no_log: true

- name: install-solr - Generate SHA256 double-hash for admin
  shell: |
    SALT="{{ admin_salt.stdout }}"
    PASS="{{ admin_password }}"
    # Step 1: SHA256(salt+password) as binary
    HASH1=$(echo -n "${SALT}${PASS}" | openssl dgst -sha256 -binary)
    # Step 2: SHA256(hash1) as base64
    HASH2=$(echo -n "${HASH1}" | openssl dgst -sha256 -binary | base64 -w0)
    # Output: HASH SALT (space-separated)
    echo "${HASH2} ${SALT}"
  register: admin_hash
  changed_when: false
  no_log: true

- name: install-solr - Generate SHA256 double-hash for support
  shell: |
    SALT="{{ support_salt.stdout }}"
    PASS="{{ support_password }}"
    HASH1=$(echo -n "${SALT}${PASS}" | openssl dgst -sha256 -binary)
    HASH2=$(echo -n "${HASH1}" | openssl dgst -sha256 -binary | base64 -w0)
    echo "${HASH2} ${SALT}"
  register: support_hash
  changed_when: false
  no_log: true

- name: install-solr - Generate SHA256 double-hash for customer
  shell: |
    SALT="{{ customer_salt.stdout }}"
    PASS="{{ customer_password }}"
    HASH1=$(echo -n "${SALT}${PASS}" | openssl dgst -sha256 -binary)
    HASH2=$(echo -n "${HASH1}" | openssl dgst -sha256 -binary | base64 -w0)
    echo "${HASH2} ${SALT}"
  register: customer_hash
  changed_when: false
  no_log: true

- name: install-solr - Set hash facts
  set_fact:
    admin_password_hash: "{{ admin_hash.stdout }}"
    support_password_hash: "{{ support_hash.stdout }}"
    customer_password_hash: "{{ customer_hash.stdout }}"
  no_log: true

- name: install-solr - Validate SHA256 hash format
  assert:
    that:
      - admin_password_hash is match('^[A-Za-z0-9+/=]+ [A-Za-z0-9+/=]+$')
      - support_password_hash is match('^[A-Za-z0-9+/=]+ [A-Za-z0-9+/=]+$')
      - customer_password_hash is match('^[A-Za-z0-9+/=]+ [A-Za-z0-9+/=]+$')
      - admin_password_hash.split(' ') | length == 2
      - support_password_hash.split(' ') | length == 2
      - customer_password_hash.split(' ') | length == 2
    fail_msg: "SHA256 hash validation failed - incorrect format (expected: 'HASH SALT')"
    success_msg: "All SHA256 hashes validated successfully"

- name: install-solr - Display hash format info
  debug:
    msg:
      - "HASH FORMAT: Solr-compatible SHA256 double-hash"
      - "Algorithm: base64(sha256(sha256(salt+password))) base64(salt)"
      - "Admin hash length: {{ admin_password_hash | length }} chars"
      - "Support hash length: {{ support_password_hash | length }} chars"
      - "Customer hash length: {{ customer_password_hash | length }} chars"
      - "Format: HASH SALT (space-separated)"

- name: install-solr - Create Rundeck output
  set_fact:
    auth_prehash_result:
      status: "success"
      timestamp: "{{ ansible_date_time.iso8601 }}"
      message: "Password hashing completed"
      details:
        method: "sha256_double_hash"
        format: "base64(sha256(sha256(salt+password))) base64(salt)"
        tool: "openssl"
        salt_size_bytes: 32
        users:
          - "{{ solr_admin_user }}"
          - "{{ solr_support_user }}"
          - "{{ solr_customer_user }}"
        solr_compatible: true
        version: "1.2.1"

- name: install-solr - Display prehash summary
  debug:
    msg: "{{ auth_prehash_result | to_nice_json }}"
  when: rundeck_integration_enabled | default(false)

- name: install-solr - Display standard summary
  debug:
    msg:
      - "SHA256 DOUBLE-HASH PASSWORD HASHING COMPLETED"
      - "Algorithm: base64(sha256(sha256(salt+password))) base64(salt)"
      - "Tool: OpenSSL"
      - "Salt size: 32 bytes per user"
      - "Format: HASH SALT (space-separated base64)"
      - "Validation: PASSED"
      - ""
  when: not rundeck_integration_enabled | default(false)
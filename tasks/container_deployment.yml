---
# Version: 1.3.4 
# Description: Deploy Solr container using Docker Compose with init-container
# Changelog v1.3.4: 
#   - Wait for container 'running' status instead of 'healthy' 
#   - Added port-based waiting instead of health check dependency 
#   - Health check is now informational only 

- name: solr-deployment - Check if services are already running
  command: docker compose -f {{ solr_compose_dir }}/docker-compose.yml ps --services --filter status=running
  register: running_services
  changed_when: false
  failed_when: false

- name: solr-deployment - Get security.json checksum from config directory
  stat:
    path: "{{ solr_config_dir }}/security.json"
    checksum_algorithm: sha256
  register: new_security_checksum
  become: true

- name: solr-deployment - Get existing security.json checksum from container
  command: docker exec {{ solr_container_name }} sha256sum /var/solr/data/security.json
  register: existing_security_checksum
  changed_when: false
  failed_when: false
  when: running_services.stdout_lines | length > 0

- name: solr-deployment - Extract checksum from container output
  set_fact:
    existing_checksum: "{{ existing_security_checksum.stdout.split(' ')[0] if existing_security_checksum.rc == 0 else '' }}"
  when: running_services.stdout_lines | length > 0

- name: solr-deployment - Determine if auth changed
  set_fact:
    force_restart_auth: "{{ (existing_security_checksum.rc == 0) and (new_security_checksum.stat.checksum != existing_checksum) }}"
  when: running_services.stdout_lines | length > 0

- name: solr-deployment - Set force_restart_auth to false if container not running
  set_fact:
    force_restart_auth: false
  when: running_services.stdout_lines | length == 0

- name: solr-deployment - Display restart decision
  debug:
    msg:
      - "Container running: {{ running_services.stdout_lines | length > 0 }}"
      - "Force recreate flag: {{ solr_force_recreate | default(false) }}"
      - "Auth changed: {{ force_restart_auth | default(false) }}"
      - "New checksum: {{ new_security_checksum.stat.checksum }}"
      - "Existing checksum: {{ existing_checksum | default('N/A') }}"
      - "Will restart: {{ (running_services.stdout_lines | length > 0) and (solr_force_recreate | default(false) or force_restart_auth | default(false)) }}"

- name: solr-deployment - Stop existing services if recreate or auth changed
  command: docker compose -f {{ solr_compose_dir }}/docker-compose.yml down
  when:
    - running_services.stdout_lines | length > 0
    - solr_force_recreate | default(false) or force_restart_auth | default(false)
  become: true
  register: compose_down

- name: solr-deployment - Check if volume exists
  command: docker volume inspect {{ solr_volume_name }}
  register: volume_inspect
  changed_when: false
  failed_when: false

- name: solr-deployment - Remove volume if force recreate or if volume is broken
  command: docker volume rm {{ solr_volume_name }}
  when:
    - volume_inspect.rc == 0
    - solr_force_recreate | default(false) or volume_inspect.stderr is search('no such file or directory')
  become: true
  failed_when: false
  register: volume_removed

- name: solr-deployment - Display volume removal result
  debug:
    msg: "Volume {{ solr_volume_name }} removed: {{ volume_removed.rc == 0 if volume_removed is defined and volume_removed.changed else 'Not removed' }}"

- name: solr-deployment - Remove orphaned volume directory if exists
  file:
    path: /opt/solr/data
    state: absent
  become: true
  when: solr_force_recreate | default(false)

- name: solr-deployment - Pull Solr images
  command: docker compose -f {{ solr_compose_dir }}/docker-compose.yml pull
  when: solr_force_pull | default(false)
  become: true
  register: compose_pull

- name: solr-deployment - Start init-container and Solr stack
  command: docker compose -f {{ solr_compose_dir }}/docker-compose.yml up -d
  become: true
  register: compose_up

- name: solr-deployment - Display compose up result
  debug:
    msg:
      - "Compose up return code: {{ compose_up.rc }}"
      - "Init container should start first"

- name: solr-deployment - Wait for init-container to complete
  command: docker wait {{ solr_container_name }}_powerinit
  register: init_container_wait
  failed_when: init_container_wait.stdout != '0'
  timeout: "{{ solr_init_container_timeout | default(60) }}"

- name: solr-deployment - Check init-container logs
  command: docker logs {{ solr_container_name }}_powerinit
  register: init_logs
  changed_when: false

- name: solr-deployment - Display init-container logs
  debug:
    msg: "{{ init_logs.stdout_lines }}"

- name: solr-deployment - Verify security.json exists in container
  command: docker exec {{ solr_container_name }} test -f /var/solr/data/security.json
  register: security_json_in_container
  retries: 5
  delay: 3
  until: security_json_in_container.rc == 0
  failed_when: security_json_in_container.rc != 0

- name: solr-deployment - Get deployed security.json checksum from container
  command: docker exec {{ solr_container_name }} sha256sum /var/solr/data/security.json
  register: deployed_checksum
  changed_when: false

- name: solr-deployment - Extract deployed checksum
  set_fact:
    deployed_checksum_value: "{{ deployed_checksum.stdout.split(' ')[0] }}"

- name: solr-deployment - Validate security.json checksum matches expected
  assert:
    that:
      - new_security_checksum.stat.checksum == deployed_checksum_value
    fail_msg: "security.json checksum mismatch! Expected: {{ new_security_checksum.stat.checksum }}, Got: {{ deployed_checksum_value }}"
    success_msg: "security.json deployed correctly with matching checksum"

- name: solr-deployment - Wait for Solr container to be running (not healthy) 
  command: docker inspect {{ solr_container_name }} --format '{% raw %}{{.State.Status}}{% endraw %}' 
  register: container_status 
  retries: 12 
  delay: 5 
  until: container_status.stdout == "running" 
  changed_when: false 

- name: solr-deployment - Wait for Solr HTTP port to be open 
  wait_for: 
    host: 127.0.0.1 
    port: "{{ solr_port }}" 
    state: started 
    timeout: 60 

- name: solr-deployment - Give Solr time to initialize 
  pause: 
    seconds: 10 

- name: solr-deployment - Check container health status (non-blocking) 
  command: docker inspect {{ solr_container_name }} --format '{% raw %}{{.State.Health.Status}}{% endraw %}' 
  register: container_health 
  changed_when: false 
  failed_when: false 

- name: solr-deployment - Display health status 
  debug: 
    msg: "Container health status: {{ container_health.stdout | default('no healthcheck') }}" 

- name: solr-deployment - Wait for Solr HTTP endpoint
  uri:
    url: "http://127.0.0.1:{{ solr_port }}/solr/admin/info/system"
    method: GET
    status_code:
      - 200
      - 401
  register: solr_http_check
  retries: 10
  delay: 3
  until: solr_http_check.status in [200, 401]

- name: solr-deployment - Verify authentication is active
  uri:
    url: "http://127.0.0.1:{{ solr_port }}/solr/admin/info/system"
    method: GET
    status_code: 401
  register: auth_active_check
  failed_when: auth_active_check.status != 401

- name: solr-deployment - Create Rundeck output
  set_fact:
    container_deployment_result:
      status: "success"
      timestamp: "{{ ansible_date_time.iso8601 }}"
      message: "Solr container deployed with authentication"
      details:
        container_name: "{{ solr_container_name }}"
        init_container: "{{ solr_container_name }}_powerinit"
        container_status: "{{ container_status.stdout }}" 
        health_status: "{{ container_health.stdout | default('no healthcheck') }}" 
        http_status: "{{ solr_http_check.status }}"
        auth_status: "{{ 'active' if auth_active_check.status == 401 else 'inactive' }}"
        security_json_deployed: true
        security_json_checksum_expected: "{{ new_security_checksum.stat.checksum }}"
        security_json_checksum_actual: "{{ deployed_checksum_value }}"
        security_json_checksum_match: "{{ new_security_checksum.stat.checksum == deployed_checksum_value }}"
        port: "{{ solr_port }}"
        restart_triggered: "{{ force_restart_auth | default(false) }}"
        volume_removed: "{{ volume_removed.rc == 0 if volume_removed is defined and volume_removed.changed else false }}"

- name: solr-deployment - Display Rundeck output
  debug:
    msg: "{{ container_deployment_result | to_nice_json }}"
  when: rundeck_integration_enabled | default(false)

- name: solr-deployment - Display standard summary
  debug:
    msg:
      - "========================================"
      - "SOLR CONTAINER DEPLOYED SUCCESSFULLY"
      - "========================================"
      - "Container: {{ solr_container_name }}"
      - "Init-Container: {{ solr_container_name }}_powerinit (completed)"
      - "Container Status: {{ container_status.stdout }}" 
      - "Health Status: {{ container_health.stdout | default('no healthcheck') }}" 
      - "HTTP Status: {{ solr_http_check.status }}"
      - "Authentication: {{ 'ACTIVE' if auth_active_check.status == 401 else 'INACTIVE' }}"
      - ""
      - "SECURITY.JSON VALIDATION:"
      - "  Expected checksum: {{ new_security_checksum.stat.checksum }}"
      - "  Deployed checksum: {{ deployed_checksum_value }}"
      - "  Match: {{ 'YES' if new_security_checksum.stat.checksum == deployed_checksum_value else 'NO' }}"
      - ""
      - "DEPLOYMENT DECISIONS:"
      - "  Restart due to auth change: {{ 'YES' if force_restart_auth | default(false) else 'NO' }}"
      - "  Volume removed: {{ 'YES' if (volume_removed is defined and volume_removed.changed and volume_removed.rc == 0) else 'NO' }}"
      - "  Force recreate: {{ 'YES' if solr_force_recreate | default(false) else 'NO' }}"
      - ""
      - "Port: {{ solr_port }}"
      - "========================================"
  when: not rundeck_integration_enabled | default(false)